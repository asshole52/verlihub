#!@BASH_PATH@

###########################################################################
#   Author: Verlihub Team  (devs at verlihub-project dot org )            #
#                                                                         #
#   Copyright (C) 2006-2011 by Verlihub Project                           #
#   devs at verlihub-project dot org                                      #
#                                                                         #
#   This program is free software; you can redistribute it and/or modify  #
#   it under the terms of the GNU General Public License as published by  #
#   the Free Software Foundation; either version 2 of the License, or     #
#   (at your option) any later version.                                   #
#                                                                         #
#   This program is distributed in the hope that it will be useful,       #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#   GNU General Public License for more details.                          #
#                                                                         #
#   You should have received a copy of the GNU General Public License     #
#   along with this program; if not, write to the                         #
#   Free Software Foundation, Inc.,                                       #
#   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             #
###########################################################################


### check int

SCRIPT=$0
# Include library
source $(dirname $0)/vh_lib

help_me()
{
	echo_s "$SCRIPT\n" $BOLD
	echo "This is a utility script for Verlihub, usage:"
	echo_s "   --install" $RED && echo -e "\t\t\t\tConfigure Verlihub for a new new hub"
	echo_s "   --run" $RED && echo -e "\t<path_to_dbconfig> \tRun the hub from given dbconfig path"
	echo_s "   --restart" $RED && echo -e "\t<path_to_dbconfig> \tRestart the hub from given dbconfig path"
	echo_s "   --stop" $RED && echo -e "\t<path_to_dbconfig> \tStop the hub from given dbconfig path"
	echo_s "   --adduser" $RED && echo -e "\t\t\t\tRegister a new user in the database"
		echo_s "\t--nickname" $BLUE && echo -e " \t<nickname> \t\tNickname of the user"
		echo_s "\t--password" $BLUE && echo -e " \t<password> \t\tUser's password (optional)"
		echo_s "\t--class" $BLUE && echo -e " \t<class> \t\tClass of the user (-1, 0, 1, 2, 3, 4, 5, 10)"
		echo_s "\t--configdir" $BLUE && echo -e " \t<path_to_dbconfig> \tSpecify the hub with location of dbconfig file. Optional"
		echo_s "   --geoip" $RED && echo -e "\t[path_to_dbconfig] \t\tUpdate GeoIP"
	echo_s "   --backup" $RED && echo -e "\t<destination_path> [path_to_dbconfig] \tMake backup of database from given dbconfig path"
	echo_s "   --restore" $RED && echo -e "\t<path_to_sql>      [path_to_dbconfig] \tImport the given SQL file in the database for given dbconfig path"
	echo_s "   --version" $RED && echo -e "\t\t\t\tPrint version information"
	echo_s "   --help" $RED && echo -e "\t\t\t\tShow this help"
	echo ""
}

function version()
{ 
	echo_s "Script version: " $BOLD && echo "$VER"; 
	echo_s "Verlihub version: " $BOLD && echo @VERLIHUB_VERSION@;
}

function run_hub() # path_to_dbconfig, do_not_print_deafult_path_msg
{
	# Check config directory
	if [ "_$2" == "_" ]; then
		if ! set_path $1 ; then
			exit 1;
		fi
	else
		if ! set_path $1 > /dev/null 2>&1 ; then
			exit 1;
		fi
	fi

	# Check if hub is already running
	if is_hub_running $CONFIG_DIR ; then
		echo "-- Hub is already running with PID $PID_RESULT. To stop it use --stop option"
		exit 1;
	fi
	echo "-- Starting hub with config folder '$CONFIG_DIR'. This could take some times";
	
	LOG_FILE=$CONFIG_DIR/log
	ERROR_FILE=$CONFIG_DIR/err

	# Backup logs
	[ -e $ERROR_FILE ] && mv -f $ERROR_FILE $ERROR_FILE.old
	[ -e $LOG_FILE ] && mv -f $LOG_FILE $LOG_FILE.old
	# Create log files
	touch $LOG_FILE && touch $ERROR_FILE

	# Check if MySQL socket exists
	MYSQL_HOST=$(get_db_host)
	IS_MYSQL_HOST_LOCAL=false
	[ $MYSQL_HOST == "localhost" ] && IS_MYSQL_HOST_LOCAL=true
	[ $MYSQL_HOST == "127.0.0.1" ] && IS_MYSQL_HOST_LOCAL=true
	if $IS_MYSQL_HOST_LOCAL ; then
		mysql_get_socket
		if [ ! -z $SOCKET ]; then
			export "MYSQL_UNIX_PORT=$SOCKET"
		fi
	fi
	
	# Run it
	$BINDIR/$DAEMON_NAME $BINDIR/verlihub >"$LOG_FILE" 2>"$ERROR_FILE" &
	PID=$!
	disown $PID
	# Check if pid is returned
	if [ "_$PID" == "_" ]; then
		echo_s "-- A error occured while tring to get PID of verlihub\n" $RED
		return 1;
	fi;
	sleep 2
	# Save pid
	PID_FILE="$CONFIG_DIR/pid"
	echo $PID > $PID_FILE
	if ! is_hub_running $CONFIG_DIR ; then
		echo_s "-- Hub is not running. Please check '$LOG_FILE' and '$ERROR_FILE' for more information\n" $RED
		rm -f $PID_FILE
		return 1;
	fi
	
	echo -n "-- Starting verlihub (PID: $PID)..."
	sleep 1
	echo " Done"
}

function kill_hub() # path_to_dbconfig
{
	# Check config directory
	if ! set_path $1 ; then
		exit 1;
	fi

	# Check if hub is already running
	if ! is_hub_running $CONFIG_DIR ; then
		echo_s "-- Hub with config path '$CONFIG_DIR' is not running\n" $RED
		rm -f $PID_FILE
		return 1;
	fi
	get_pid $CONFIG_DIR
        echo -n "-- Killing verlihub (PID: $PID_RESULT)..."
        if ! kill $PID_RESULT > /dev/null 2>&1 ; then
		echo_s " USER HAS NO RIGHT TO STOP THE PROCESS\n" $RED
		echo_s "-- Please use 'kill -9 $PID_RESULT' as root\n" $RED
		exit 1;
	fi
        rm -f "$CONFIG_DIR/pid"
	sleep 2
	echo " Done"
}

# Import sql file in database
function restore() # sql_file, path_to_dbconfig
{
	# Check SQL file
	FILE_EXTENSION=${1##*.}
	if [ "_$1" == "_" ] || [ ! -f "$1" ] || [ $FILE_EXTENSION != "sql" ]; then
		echo_s "-- Please provide a valid SQL file\n" $RED
		exit;
	fi

	if ! set_path $2 ; then
		exit;
	fi
	# Import SQL
	if ! $(mysql_import $1) > /dev/null 2>&1  ; then
		echo_s "-- A error occured with file importing\n" $RED
		exit;	fi
	echo "-- File imported successfully";
}

function backup() # destination folder, path_to_dbconfig
{
	# Check if mysqldump is installed
	DUMP=`whereis mysqldump | awk '{ print $2 }'`
	if [ -z "$DUMP" ]; then
		echo_s "-- This command requires mysqldump to work, please consider installing it\n"
		exit;
	fi
	# Check destination folder
	if [ ! -d $1 ] || [ "_$1" == "_" ]; then
		echo_s "-- Please provide a valid destination folder\n"
		exit;
	fi
	# Check permission
	if $(touch $1/_test_file > /dev/null 2>&1); then
		$(rm $1/_test_file) ;
	else
		echo_s "-- You don't have the write permission in '$1'\n" $RED
		exit;
	fi
	# Check config directory
	if ! set_path $2 ; then
		exit 1;
	fi

	FILE="$1/${TIMESTAMP}.sql"
	if ! $(@BASH_PATH@ -c "$DUMP -h $(get_db_host) -u $(get_db_user) -p$(get_db_pass) $(get_db_name)" >"$FILE" 2>/dev/null) ; then

		echo_s "-- A error occured with backup\n" $RED
		rm -rf $FILE
		exit;
	else
		echo "-- Backup file '$FILE' successfully saved for '$CONFIG_DIR'";
	fi
}

function add_user()
{
	# Read options
	while [ "$1" != "" ]; do
		case "$1" in
			--nickname)	shift
					USER_NICKNAME=$1;;
			--password)	shift
					USER_PASSWORD=$1;;	
			--class)	shift
					USER_CLASS=$1;;
			--configdir)	shift
					CONF_DIR=$1;;
			*)
					echo_s "Unknown parameter $1\n" $RED;;
		esac;
		shift;
	done;
	# Check and set path
	if ! set_path $CONF_DIR ; then
		exit 1;
	fi

	# Check if reglist exists
	if ! is_table_exists "reglist" ; then
		echo_s "-- Reglist table does not exist. Fix the error and try again\n" $RED
		exit 1;
	fi
	# Check if class is valid
	if [ "_$USER_CLASS" == "_" ] || check_class $USER_CLASS ; then
		echo_s "-- Specify a valid class (-1, 0, 1, 2, 3, 4, 5, 10)\n" $RED
		exit 1;
	fi
	# Check if nickname is empty
	if [ "_$USER_NICKNAME" == "_" ]; then
		echo_s "-- Specify nickname with --nickname option\n" $RED
		exit 1;
	fi;
	
	# Print summary
	echo_s "User information\n"
	echo_s "\tNickname" $BOLD
	echo_s ": $USER_NICKNAME\n"
	if [ "$USER_PASSWORD" != "" ]; then
		echo_s "\tPassword" $BOLD
		echo_s ": $USER_PASSWORD\n"
	fi
	echo_s "\tClass" $BOLD
	echo_s ": $USER_CLASS\n"
	if [ "$CONFIG_DIR" != "" ]; then
		echo_s "\tConfig directory" $BOLD
		echo_s ": $CONFIG_DIR\n"
	fi

	if ! register $USER_NICKNAME $USER_CLASS $USER_PASSWORD ; then
		echo_s "-- A error occured while trying to execute MySQL query. Is user '$USER_NICKNAME' already exists?\n" $RED
		exit;
	fi
	echo "-- Done"
}

# Get mysql admin access
function ask_admin_access_cli()
{
	ARE_ADMIN_DB_INFO_OK=false
	until $ARE_ADMIN_DB_INFO_OK;
	do
		echo_s "-- Please insert MySQL administrator information to create DB or account or grant permissions.\n"
		MYSQL_ADMIN_USER=$(ask "Username" "root")
		MYSQL_ADMIN_PASSWORD=$(ask "Password" "")

		echo_s "This is information about MySQL administrator:\n"
		echo_s "\tUsername" $BOLD
		echo_s ": $MYSQL_ADMIN_USER \n"
		echo_s "\tPassword" $BOLD
		echo_s ": $MYSQL_ADMIN_PASSWORD \n"
		yes_or_no "Do you want to continue with this information?" && ARE_ADMIN_DB_INFO_OK=true || echo -e "Let's do it again\n\n"
	done
}

# Update GeoIP
function update_geoip()
{
	if [ $UID -ne 0 ]; then
		echo_s "-- You can only run this option with root account\n" $RED
		exit 0;
	fi

	# Check if mysqldump is installed
	DUMP=`whereis gzip | awk '{ print $2 }'`
	if [ -z "$DUMP" ]; then
		echo_s "-- This command requires gzip to work, please consider installing it\n"
		exit 1;
	fi
	# Check config directory
	if ! set_path $1 ; then
		exit 1;
	fi
	# Check if directory exists
	if [ ! -d /usr/share/GeoIP/ ]; then
		echo_s "-- Can't find '/usr/share/GeoIP/'. If you installed GeoIP in another prefix you should update it manually\n" $RED
		exit 1;
	fi;

	# Maxmind link
	local ADDRESS="http://geolite.maxmind.com/download/geoip/database/GeoLiteCountry/GeoIP.dat.gz "
	
	# Download tarball
	echo "-- Download GeoIP from Maxmind server"
	wget $ADDRESS > /dev/null 2>&1
	if [ $? -ne 0 ]; then
		echo_s "-- A error happens while trying to download GeoIP tarball\n" $RED
		exit 1;
	fi
	# Decompress the file
	gzip -d GeoIP.dat.gz
	if [ $? -ne 0 ]; then
		echo_s "-- A error happens while trying to decompress GeoIP tarball\n" $RED
		exit 1;
	fi
	# Move the file
	mv -f GeoIP.dat /usr/share/GeoIP/GeoIP.dat
	if [ $? -ne 0 ]; then
		echo_s "-- A error happens while trying to copy GeoIP DAT file\n" $RED
		exit 1;
	fi
	echo "-- Done"
	exit 0;
}

# Install verlihub
function install_cli() 
{
	# Clear shell
	clear

	# Print introduction
	REALUSER="$USER"
	echo_s "Hello "
	echo_s "$REALUSER,\n" $BOLD
	echo_s "let's start with the configuration of database access. If you have some problems with configuration you can: \n"
	echo_s "\t*" $BOLD
	echo_s " Follow the official manual: http://www.verlihub-project.org/manual \n"
	echo_s "\t*" $BOLD
	echo_s " Ask support on forums: http://www.verlihub-project.org/forums \n"
	echo_s "\t*" $BOLD
	echo_s " Ask support on VAZ: dchub://vaz.verlihub-project.org\n"

	# Get MySQL information
	echo_s "\n[*] MySQL settings\n" $RED_BOLD
	echo_s "-- Please insert MySQL server setting below for the hub. \n"
	echo_s "   If the account/DB does not exist it will be created later in this setup. \n"

	set_path $VERLIHUB_CFG > /dev/null 2>&1;

	ARE_DB_INFO_OK=false
	until $ARE_DB_INFO_OK;
	do
		MYSQL_DB_NAME=$(get_db_name)
		MYSQL_DB_NAME=$(ask "Choose database name" $MYSQL_DB_NAME)
		MYSQL_USER=$(get_db_user)
		MYSQL_USER=$(ask "MySQL user to access to '$MYSQL_DB_NAME'" $MYSQL_USER)
		MYSQL_PASSWORD=$(get_db_pass)
		MYSQL_PASSWORD=$(ask "MySQL password for user '$MYSQL_USER'" $MYSQL_PASSWORD)
		MYSQL_HOST=$(get_db_host)
		MYSQL_HOST=$(ask "MySQL hostname" $MYSQL_HOST)

		echo_s "This is information about MySQL:\n"
		echo_s "\tDatabase" $BOLD
		echo_s ": $MYSQL_DB_NAME \n"
		echo_s "\tUsername" $BOLD
		echo_s ": $MYSQL_USER \n"
		echo_s "\tPassword" $BOLD
		echo_s ": $MYSQL_PASSWORD \n"
		echo_s "\tHostname" $BOLD
		echo_s ": $MYSQL_HOST \n"
		yes_or_no "Do you want to continue with this information?" && ARE_DB_INFO_OK=true || echo -e "Let's do it again\n\n"
	done

	# Ask user the IP addrress of current server to allow access for MySQL server
	IS_MYSQL_HOST_LOCAL=false
	[ $MYSQL_HOST == "localhost" ] && IS_MYSQL_HOST_LOCAL=true
	[ $MYSQL_HOST == "127.0.0.1" ] && IS_MYSQL_HOST_LOCAL=true
	if ! $IS_MYSQL_HOST_LOCAL ; then
		echo_s "-- You are going to use a database on an external server. Please provide the IP address of this current server \n"
		IS_MYSQL_HOST_OK=false
		until $IS_MYSQL_HOST_OK;
		do
			CURRENT_ADDRESS=$(ask "Address" )
	
			if [ "_$CURRENT_ADDRESS" == "_" ]; then
				echo_s "You enter a empty value please retry with configuration\n"
			else
				IS_MYSQL_HOST_OK=true				
			fi
		done
	else
		CURRENT_ADDRESS="localhost"
	fi;

	# Test if account exists
	echo_s "\n-- Checking MySQL account $MYSQL_USER@$MYSQL_HOST; this could take some times...\n" $RED_BOLD
	does_mysql_account_exists "$MYSQL_HOST" "$MYSQL_USER" "$MYSQL_PASSWORD" && ACCOUNT_EXISTS=true || ACCOUNT_EXISTS=false

	if ! $ACCOUNT_EXISTS ; then 
		echo_s "-- The MySQL account '$MYSQL_USER' can not be accessed, it will be created now\n"
		ask_admin_access_cli
		$MYSQL -h "$MYSQL_HOST" -u "$MYSQL_ADMIN_USER" -p"$MYSQL_ADMIN_PASSWORD" -e "CREATE USER '$MYSQL_USER'@'$CURRENT_ADDRESS' IDENTIFIED BY '$MYSQL_PASSWORD'" &> /dev/null
		if ! does_mysql_account_exists "$MYSQL_HOST" "$MYSQL_USER" "$MYSQL_PASSWORD" ;
		then
			echo_s "-- The MySQL account cannot be created. Fix the problem and run the setup again\n"
			die;
		fi
	else
		echo_s "-- The MySQL account '$MYSQL_USER' has been found\n"
	fi

	# Test if database exists
	echo_s "\n-- Checking MySQL database $MYSQL_DB_NAME; this could take some times...\n" $RED_BOLD
	does_mysql_db_exists "$MYSQL_HOST" "$MYSQL_USER" "$MYSQL_PASSWORD" "$MYSQL_DB_NAME" && DB_EXISTS=true || DB_EXISTS=false
	# Create database
	if ! $DB_EXISTS ; then 
		echo_s "-- The MySQL database '$MYSQL_DB_NAME' does not exist, it will be created now\n"
		if [ "_$MYSQL_ADMIN_USER"  == "_" -o "_$MYSQL_ADMIN_PASSWORD"  == "_" ]; then
			ask_admin_access_cli
		fi
	else
		echo_s "-- The MySQL database '$MYSQL_DB_NAME' has been found\n"
	fi

	# Create/grant permissions (check if admin account has been specify)
	if [ "_$MYSQL_ADMIN_USER"  == "_" -o "_$MYSQL_ADMIN_PASSWORD"  == "_" ]; then
		ask_admin_access_cli
	fi
	$MYSQL -h "$MYSQL_HOST" -u "$MYSQL_ADMIN_USER" -p"$MYSQL_ADMIN_PASSWORD" -e "CREATE DATABASE IF NOT EXISTS \`$MYSQL_DB_NAME\`; GRANT ALL ON \`$MYSQL_DB_NAME\`.* to 	'$MYSQL_USER'@'$CURRENT_ADDRESS' identified by '$MYSQL_PASSWORD'" &> /dev/null
	if ! does_mysql_db_exists "$MYSQL_HOST" "$MYSQL_USER" "$MYSQL_PASSWORD" "$MYSQL_DB_NAME" ; 
	then
		echo_s "A error happens while trying to create DB or to gran permission. Fix the problem and run the setup again\n"
		exit 1;
	fi	

	# Select path where to put verlihub config file
	IS_CHOOSEN_FOLDER_OK=false

	until $IS_CHOOSEN_FOLDER_OK;
	do
		echo_s "\n-- You need to choose a place for the configuration files\n" $RED_BOLD;
		echo_s "\t[1] " $BOLD && echo "/etc/verlihub"
		echo_s "\t[2] " $BOLD && echo "$HOME.verlihub"
		echo_s "\t[3] " $BOLD && echo "$PREFIX/etc/verlihub"
		echo_s "\t[4] " $BOLD && echo "Other, choose path where put config file"

		CHOOSEN_FOLDER=$(ask "Select number")

		# Get selected folder
		case $CHOOSEN_FOLDER in
			"1") CHOOSEN_FOLDER="/etc/verlihub/";;
			"2") CHOOSEN_FOLDER="$HOME.verlihub/";;
			"3") CHOOSEN_FOLDER="$PREFIX/etc/verlihub/";;
			"4") CHOOSEN_FOLDER=$(ask "Type complete path");
		esac
	
		CHOOSEN_FOLDER_NOT_EXISTS=false
		if [ -d $CHOOSEN_FOLDER ]; then
			echo -n "-- The folder '$CHOOSEN_FOLDER' already exists (existing configuration will be backup). "
			ANSWER=$(ask "Do you want to continue? Otherwise choose 'N' to select another folder [y/N]") 
			if [ $ANSWER == 'y' ]; then
				IS_CHOOSEN_FOLDER_OK=true
			else	
				echo -e "Ok, let's try again.\n\n"
			fi
		else
			ANSWER=$(ask "-- The config folder '$CHOOSEN_FOLDER' does not exist and will be created.\n   Do you want to continue? [y/N]");
			if [ $ANSWER == 'y' ]; then
				IS_CHOOSEN_FOLDER_OK=true
				CHOOSEN_FOLDER_NOT_EXISTS=true
			else	
				echo -e "Ok, let's try again.\n\n"
			fi
		fi

		# Check if user has permissions to create/edit directory
		if $IS_CHOOSEN_FOLDER_OK ; 
		then
			if mkdir -p $CHOOSEN_FOLDER/_test_dir > /dev/null 2>&1 ; then
				rm -rf $CHOOSEN_FOLDER/_test_dir > /dev/null 2>&1 ;
			else
				echo "-- You don't have the permission to write in '$CHOOSEN_FOLDER'. Please select another folder or fix the problem and restart this setup again."  && IS_CHOOSEN_FOLDER_OK=false 
			fi
		fi	
	done

	# Set file name
	CONFIG="${CHOOSEN_FOLDER}/dbconfig"
	# Creating directory if it does not exist
	if $CHOOSEN_FOLDER_NOT_EXISTS ; then
		mkdir -p $CHOOSEN_FOLDER
	else
		# Make backup of existing configuration
		if [ -e $CONFIG ]; then
			BACKUP_DIR=$HOME
			BACKUP_NAME="vh_install_$TIMESTAMP.tar.gz"
			tar czf $BACKUP_DIR/$BACKUP_NAME $CHOOSEN_FOLDER > /dev/null 2>&1
			rm -rf $CHOOSEN_FOLDER/* > /dev/null 2>&1
			echo "-- The original configuration has been moved to $BACKUP_DIR/$BACKUP_NAME"
		fi
	fi

	# Print information for MySQL access
	echo "db_host = $MYSQL_HOST" >  $CONFIG
	echo "db_data = $MYSQL_DB_NAME" >> $CONFIG
	echo "db_user = $MYSQL_USER" >> $CONFIG
	echo "db_pass = $MYSQL_PASSWORD" >> $CONFIG
	
	echo_s "\n-- Config file has been successfully written in '$CONFIG'.\n" $RED_BOLD
	echo "-- Now they will be created other directories and files."
	echo "-- Copy files and accessing to MySQL server; this could take some times..."
	# Import other files from verlihub directory
	cp $DATADIR/config/* $CHOOSEN_FOLDER
	mkdir -p $CHOOSEN_FOLDER/plugins
	mkdir -p $CHOOSEN_FOLDER/scripts
	ln -s $LIBDIR/libplug_pi.so $CHOOSEN_FOLDER/plugins

	# Check if file has been created correctly
	[ -f $CONFIG ] && CONFIG_EXISTS=true || CONFIG_EXISTS=false
	if ! $CONFIG_EXISTS ; then
		echo_s "Your installation is NOT completed.\nInstallation was not unable to create config folder or file. Please check permission on '$CHOOSEN_FOLDER'\n" $RED
		exit 1;
	fi

	# Create tables
	set_path $CHOOSEN_FOLDER > /dev/null 2>&1;
	if ! create_mysql_tables $IS_MYSQL_HOST_LOCAL; then
		echo_s "-- ERROR: cannot create verlihub's tables in the database, cannot continue with the installation. Please check '$CHOOSEN_FOLDER/install_log' file for more info and run installation again\n" $RED
		exit 1;
	fi
	# Create admin user and hub info
	echo_s "\n-- Installation has been completed. Now you can add master account\n" $RED_BOLD

# Configure hub and account
echo_s "\n[*] Hub settings\n" $RED_BOLD
echo_s "-- Choose information about master account and hub (don't use any special characters, you'll be able to use them later) \n"
SETUP_INFO_OK=false
until $SETUP_INFO_OK; do

	HOSTNAME=`hostname`
	if [ $REALUSER == "root" ]; then
		PORT=411
	else
		PORT=4111
	fi
	VH_MASTER_NAME=$(ask "Master name" "[SU]$REALUSER")
	VH_MASTER_PASSWORD=$(ask "Master password" "$TIMESTAMP")
	VH_HUB_PORT=$(ask "Hub port" "$PORT")
	VH_HUB_HOST=$(ask "Hub host" $HOSTNAME)
	VH_HUB_NAME=$(ask "Hub name" "hub of $REALUSER")

	echo_s "Is this info correct?\n"
	echo_s "\tMaster name" $BOLD
	echo_s ": $VH_MASTER_NAME \n"
	echo_s "\tMaster password" $BOLD
	echo_s ": $VH_MASTER_PASSWORD \n"
	echo_s "\tHub name" $BOLD
	echo_s ": $VH_HUB_NAME \n"
	echo_s "\tHub address" $BOLD
	echo_s ": dchub://$VH_HUB_HOST:$VH_HUB_PORT \n"
	echo_s "\tPassword" $BOLD
	echo_s ": $MYSQL_PASSWORD \n"
	echo_s "\tHostname" $BOLD
	echo_s ": $MYSQL_HOST \n"
	yes_or_no "Do you want to continue with this information?" && SETUP_INFO_OK=true || echo -e "Let's try again with configuration\n\n"
done

# Save info to DB
echo "-- Creating settings; this could take some times..."
mysql_update "hub_name" $VH_HUB_NAME
mysql_update "hub_host" "$VH_HUB_HOST:$VH_HUB_PORT"
mysql_update "listen_port" $VH_HUB_PORT
if ! register $VH_MASTER_NAME "10" $VH_MASTER_PASSWORD ; then
	echo_s "-- A error occured with registering user '$VH_MASTER_NAME'. Please do it manually\n" $RED_BOLD
fi
if ! mysql_import $DATADIR/sql/default_reglist.sql > /dev/null 2>&1 ; then
	echo_s "-- A error occured with file importing '$DATADIR/sql/default_reglist.sql'\n" $RED_BOLD
	exit 1;
fi

echo "-- The hub is configured successfully. Now you can start the hub using vh_manage command."

exit 0;
}

case "_$1" in
	"_") 		help_me ;;
	"_--help") 	help_me;;
	"_--version")	version;;
	"_--install")	install_cli;;
	"_--run")	shift
			run_hub $1;;
	"_--stop")	shift
			kill_hub $1;;
	"_--restart")	shift
			kill_hub $1
			run_hub "$1" "restart";;
	"_--geoip")	shift
			update_geoip $1;;
	"_--restore")	shift
			restore $1 $2;;
	"_--backup")	shift
			backup $1 $2;;
	"_--adduser")
		shift
		add_user $@;;
	
	*)
		echo_s "Unknown option $1, try $SCRIPT --help\n" $RED
		exit;;
esac;
