#!@BASH_PATH@

###########################################################################
#   Author: Verlihub Team  (devs at verlihub-project dot org )            #
#                                                                         #
#   Copyright (C) 2006-2011 by Verlihub Project                           #
#   devs at verlihub-project dot org                                      #
#                                                                         #
#   This program is free software; you can redistribute it and/or modify  #
#   it under the terms of the GNU General Public License as published by  #
#   the Free Software Foundation; either version 2 of the License, or     #
#   (at your option) any later version.                                   #
#                                                                         #
#   This program is distributed in the hope that it will be useful,       #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#   GNU General Public License for more details.                          #
#                                                                         #
#   You should have received a copy of the GNU General Public License     #
#   along with this program; if not, write to the                         #
#   Free Software Foundation, Inc.,                                       #
#   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             #
###########################################################################

SCRIPT=$0
DIRECTORY=$(dirname $SCRIPT) 
DEFAULT_PATH="/etc"
DEFAULT_NAME="$DEFAULT_PATH/verlihub.conf"

# Include library
source $(dirname $0)/vh_lib

if [ $UID -ne 0 ]; then
	echo_s "-- You can only run μ-Verlihub with root account\n" $RED
	exit 0;
fi


# Check if path is correct
function _check_path() # path_to_dbconfig
{
	if [ -d "$1" ] && [ -f "$1/dbconfig" ]; then
		return 0;
	fi
	return 1;
}

# Check if identifier is valid
function _check_identifier() # id
{
	if $(echo "$1" | grep -E "^[0-9]+$" > /dev/null 2>&1 ) || [ "$1" == "A" ]; then
		return 0;
	fi
	return 1;	
}

# Check if given value already exists in config file
function _check_dups() # value_to_check
{
	while read LINE
	do
		local PATH_TO_CONFIG="$(echo $LINE | cut -d: -f1)"
		if [ "$1" == $PATH_TO_CONFIG ]; then
			return 0
		fi
	done < $DEFAULT_NAME
	return 1
}

# Convert unix timestamps to readable date
function _unix_to_date () #unix_timestamps
{
	echo $(date --utc --date "1970-01-01 $1 sec" "+%Y-%m-%d %T")
}

# Format row of table to print lists
function _format_row() # string, width, style
{
	local WIDTH=10
	local STYLE=""
	local COUNT=${#1}

	if [ "_$2" != "_" ]; then
		WIDTH=$2
	fi
	if [ "_$3" != "_" ]; then
		STYLE=$3
	fi
	
	echo_s "$1" $STYLE
	local DIFF=$(($WIDTH-$COUNT))
	if [ $DIFF -gt 0 ]; then
		for i in $(seq 1 $DIFF); do 
			echo -n " "
		done

	fi
}

# Ask to user to insert identifier
function _ask_identifier()
{
	local VALIDATE=false

	until $VALIDATE
	do	
		local CHOOSEN_HUB=$(ask "Select number")
		if _check_identifier $CHOOSEN_HUB; then
			VALIDATE=true
			echo $CHOOSEN_HUB
		else
			echo_s "-- Insert number or A to choose all hubs\n" $RED
		fi
	done
}

# Get path to dbconfig from identifier
function _get_path_from_identifier() # identifier
{
	local INDEX=1

	while read LINE
	do
		if [ $INDEX == $1 ]; then
			echo $LINE | cut -d: -f1
			return 0
		fi
		INDEX=$(($INDEX+1))
	done < $DEFAULT_NAME
	return 1
}

# Get path to dbconfig from identifier
function _get_process_owner_from_identifier() # identifier
{
	local INDEX=1

	while read LINE
	do
		if [ $INDEX == $1 ]; then
			echo $LINE | cut -d: -f3
			return 0
		fi
		INDEX=$(($INDEX+1))
	done < $DEFAULT_NAME
	return 1
}

# Print list of hubs added in config file
function _get_hubs_list() # print_legend
{
	local INDEX=1
	local COLOR=""

	# Check if config file exists or is empty
	if [ ! -s $DEFAULT_NAME ] || [ ! -f $DEFAULT_NAME ] ; then
		echo_s "-- Config file is empty. Add new hub using $0 --add\n" $RED
		exit 0;
	fi

	echo_s "ID  " $BOLD
	_format_row "Owner" 20 $BOLD
	_format_row "Path to dbconfig" 35 $BOLD
	_format_row "Process owner" 20 $BOLD
	echo_s "Last update\n" $BOLD

	while read LINE
	do
		local PATH_TO_CONFIG="$(echo $LINE | cut -d: -f1)"
		local NICKNAME="$(echo $LINE | cut -d: -f2)"
		local PROCESS_OWNER="$(echo $LINE | cut -d: -f3)"
		local DATE="$(echo $LINE | cut -d: -f4)"

		# Check if hub is running
		if is_hub_running $PATH_TO_CONFIG ; then
			COLOR=$GREEN_BOLD
		else
			COLOR=$RED_BOLD
		fi
		
		echo_s "[$INDEX] " $COLOR
		
		_format_row "$NICKNAME" 20
		_format_row "$PATH_TO_CONFIG" 35
		_format_row $PROCESS_OWNER 20
		echo $(_unix_to_date $DATE)
		INDEX=$(($INDEX+1))
	done < $DEFAULT_NAME

	# Legend
	if [ "_$1" != "_" ]; then
		echo ""
		echo -n "Hub status: "
		echo_s "Running" $GREEN_BOLD
		echo -n " | "
		echo_s "Stopped\n\n" $RED_BOLD
	fi
}

function help_me()
{
	echo_s "μ-Verlihub (multi-Verlihub)\n" $BOLD
	echo "This is a utility to run, restart and stop hubs with Verlihub, usage:"
	echo_s "   --list" $RED && echo -e "\t\t\tShow a list of added hubs"
	echo_s "   --add" $RED && echo -e "\t\t\tAdd new hub to config file"
	echo_s "   --del" $RED && echo -e "\t[ID]\t\tDelete a hub from config file"
	echo_s "   --run" $RED && echo -e "\t[ID]\t\tRun single hub or all hubs togheter"
	echo_s "   --stop" $RED && echo -e "\t[ID]\t\tStop single hub or all hubs togheter"
	echo_s "   --restart" $RED && echo -e "\t[ID]\t\tRestart single hub or all hubs togheter"
	echo_s "   --version" $RED && echo -e "\t\t\tPrint version information"
	echo_s "   --help" $RED && echo -e "\t\t\tShow this help"
}

function version()
{ 
	echo_s "μ-Verlihub version: " $BOLD && echo "$VER"; 
	echo_s "Verlihub version: " $BOLD && echo @VERLIHUB_VERSION@;
}

function list()
{ 
	echo "-- This is a list of available  hubs"
	echo
	_get_hubs_list "legend"
	exit 0
}

function action() # action type [1 = start, 2= stop, 3= restart], number [optional]
{
	# Select action
	case "$1" in
		1) ACTION=run;;
		2) ACTION=stop;;
		3) ACTION=restart;;
		"A") exit 1;;
	esac;

	# Check if identifier is set and is valid
	if [ "_$2" != "_" ] && _check_identifier $2 ; then
		ENTRY_ID="$2"

	# Print list
	else
		echo "-- Choose hub from list:"
		echo
		_get_hubs_list
		echo_s "[A] " $BOLD
		echo "All hubs"
		echo
		ENTRY_ID=$(_ask_identifier)
	fi

	# Perform action for all hubs
	if [ $ENTRY_ID == "A" ]; then
		while read LINE
		do
			local VERLIHUB_PATH="$(echo $LINE | cut -d: -f1)"
			local PROCESS_OWNER="$(echo $LINE | cut -d: -f3)"
			echo_s "-- Performing action for '$VERLIHUB_PATH'\n" $BOLD
			su -c "$DIRECTORY/vh_manage_cli --$ACTION $VERLIHUB_PATH" $PROCESS_OWNER
		done < $DEFAULT_NAME
		exit 0
	fi

	# Run selected hub
	local VERLIHUB_PATH=$(_get_path_from_identifier $ENTRY_ID)
	if [ "$?" -eq 1 ] ; then
		echo_s "-- Can't find selected entry\n" $RED
		exit 1;
	fi
	local PROCESS_OWNER=$(_get_process_owner_from_identifier $ENTRY_ID)
	if [ "$?" -eq 1 ] ; then
		echo_s "-- Can't find process owner\n" $RED
		exit 1;
	fi

	echo_s "-- Performing action for '$VERLIHUB_PATH'\n" $BOLD
	su -c "$DIRECTORY/vh_manage_cli --$ACTION $VERLIHUB_PATH" $PROCESS_OWNER
	exit 0
	
}

function add() # nickname, path_to_dbconfig
{
	# Check if file exists otherwise create it
	if [ ! -f $DEFAULT_NAME ]; then
		if ! $(touch $DEFAULT_NAME > /dev/null 2>&1); then
			echo_s "-- You don't have the write permission in '$DEFAULT_PATH' to create config file\n" $RED
			exit 1;	
		fi
	elif ! $(touch $DEFAULT_NAME -a > /dev/null 2>&1); then
		echo_s "-- You don't have the write permission in '$DEFAULT_PATH' to edit config file\n" $RED
		exit 1;	
	fi

	# Ask information
	echo "-- Please insert some information for new entry"
	local IS_CONFIG_OK=false
	until $IS_CONFIG_OK;
	do
		local NICKNAME=$(ask "Choose nickname of hub owner")

		local IS_PROCESS_OWNER_OK=false
		until $IS_PROCESS_OWNER_OK;
		do
			local PROCESS_OWNER=$(ask "Choose user that should run verlihub")
			if ! egrep -i "^$PROCESS_OWNER" /etc/passwd > /dev/null 2>&1 ; then
				echo_s "User does not exist in the system\n" $RED
			else
				IS_PROCESS_OWNER_OK=true
			fi
		done

		local IS_CONFIG_PATH_OK=false
		until $IS_CONFIG_PATH_OK;
		do
			local CONFIG_PATH=$(ask "Type path to dbconfig")
			CONFIG_PATH=${CONFIG_PATH%/}
			if [ "_$CONFIG_PATH" == "_" ] || ! _check_path $CONFIG_PATH ; then
				echo_s "Please insert a valid config folder with dbconfig file\n" $RED
			elif _check_dups $CONFIG_PATH ; then
				echo_s "The path already exists in config file\n" $RED
			else
				IS_CONFIG_PATH_OK=true
			fi
		done
		echo_s "This is information you choose:\n"
		echo_s "\tNickname" $BOLD
		echo_s ": $NICKNAME \n"
		echo_s "\tProcess owner" $BOLD
		echo_s ": $PROCESS_OWNER \n"
		echo_s "\tConfig path" $BOLD
		echo_s ": $CONFIG_PATH \n"
		yes_or_no "Do you want to add this settings?" && IS_CONFIG_OK=true || echo -e "Let's do it again\n"
	done
	
	# Add new entry		
	echo "$CONFIG_PATH:$NICKNAME:$PROCESS_OWNER:$(date +%s)" >> $DEFAULT_NAME
	echo "-- Successfully added entry '$CONFIG_PATH' to config file"
	exit 0;
}

function del() # number [optional]
{
	# Check if identifier is set and is valid
	if [ "_$1" != "_" ] && _check_identifier $1 ; then
		ENTRY_ID="$1"
	# Print list
	else
		echo "-- Choose hub from list:"
		echo
		_get_hubs_list
		echo
		ENTRY_ID=$(_ask_identifier)
	fi

	# Delete entry
	if ! sed -i".bak" "${ENTRY_ID}d" $DEFAULT_NAME > /dev/null 2>&1 ; then
		echo_s "-- A error happens while trying to delete entry\n" $RED
		exit 1;
	fi
	echo "-- Done"
	exit 0
}

case "_$1" in
	"_") 			help_me ;;
	"_--help") 		help_me;;
	"_--version")	version;;
	"_--list")		list;;
	"_--run")		shift
					action 1 $*;;
	"_--stop")		shift
					action 2 $*;;
	"_--restart")	shift
					action 3 $*;;
	"_--add")		shift
					add $*;;
	"_--del")		shift
					del $*;;
	*)
		echo_s "Unknown option $1, try $SCRIPT --help\n" $RED
		exit;;
esac;
